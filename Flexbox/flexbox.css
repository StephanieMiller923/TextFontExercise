/* FLEXBOX */
/* Flexbox allows for a flexiable and responsive layout to be created without having to use float or position */

div div {
    width: 200px;
    margin: 10px;
    border: 3px solid black;
    font-size: 25px;
}

.container {
    background: #999;
    /* display: flex creates a flexbox container */
    /* Flexbox always has a main axis and cross axis. Main axis is horizontal and cross axis is vertical by default when using flexbox (ex. display: flex) */
    display: flex;

    /* Justify Content */
    /* Justify content will determine how the elements are set along the main axis (Horizontal axis in this case) */
    /* flex-start is the default justifu content value */
    /* justify-content: flex-start; */
    /* flex-end positions the flexbox items at the end of the main axis (All the way to the right in our case) */
    /* justify-content: flex-end; */
    /* center positions the flexbox items in the center of the main axis (Horizontal axis in our case) */
    /* justify-content: center; */
    /* space-between psoitions the items with even distrubation of the space between them */
    /* justify-content: space-between; */
    /* space-around positions the items with even distribution of left and right margin on each one */
    /* justify-content: space-around; */

    /* Align Items */
    /* Align items will determine how the elements are set alone the cross axis (Vertical axis in this case) */
    /* Stretch is the default value for Align Items (Since we have min-height values set on the divs they stretch to fill the vertical space) */
    /* align-items: stretch; */
    /* center will remove the default stretch value and center each item along the cross axis (Vertical axis in this case) */
    /* align-items: center; */
    /* align-items: flex-start; */
    /* align-items: flex-end; */

    /* Flex Wrap */
    /* Flex Wrap wraps items that connot fit on the current line  onto the next line */
    /* flex-wrap: wrap; */

    /* Align Content */
    /* Align content is used like :align items: for elements that are being wrapped onto another line */
    /* align-content: center; */
    /* align-content: flex-end; */
    /* align-content: flex-start; */
    /* height: 750px; */

    /* Flex Direction */
    /* Flex direction sets the flex items in a row or a column (The default is a row) */
    /* flex-direction: column changes flex items into a column instead of a row! */
    /* flex-direction: column;
    align-items: center;
    justify-content: center; */
}

.red {
    background: red;
    min-height: 100px;

   /* Flex Grow */
   /* Flex grow determines if a flexbox will gtow and how much it will grow. 0 is the default value */
   /* flex-grow: 2; */
   
    /* Flex Shrink */
    /* Flex Shrink determines if a flexbox item will shrink and how much it will shrink. 1 is the default value */
    /* flex-shrink: 1; */
    /* Items does not shrink whenever flex shrink is set to zero */
    /* flex-shrink: 0; */
    /* Item shrinks twice as fast as other items */
    flex-shrink: 2;

    /* Flex Basis */
    /* Flex Basis determines where the flex grow/shrink properties start from. Default is auto, which sets the length of the flexbox item to its predetermined length. Flex basis is usually set with a length in pixels. */
    /* flex-basis: 400px; */
    /* flex-shrink: 2; */
    /* flex-grow: 1; */
     
    /* Order
     /* Order changes the order of the flexbox items in their container */
    /* order: 3; */

    /* Align Self */
    /* Align self allows you to set the align items property on  a single flexbox item */
    align-self: center;
}


.green {
    background: green;
    min-height: 200px;
    /* flex-grow: 2 */
    /* flex-shrink: 2; */
    align-self: flex-end;
}

.blue {
    background: blue;
    min-height: 300px;
    /* flex-grow: 1; */
}